#**************************************************************************
#We are working on a computing fundamentals quiz bot
#This chatbot will have the functionality to have stored interview questions; true/false, multiple choice, and FRQ
#This bot will ask the user questions and give back a score determined on the number of correct and false answers
#This bot will also record the amount of time needed to answer each question
import json
import random
import time
from datetime import datetime
#**************************************************************************
# Stored Variables:
try:
  with open('question_bank.json', 'r') as file:
  questions = json.load(file)
  except FileNotFoundError:
  print("Error, file not found")
  quit()
  except json.JSONDecodeError
  print("Could not decode file")
  quit()
try: 
  with open('rubric.json', 'r') as file:
  rubric = json.load(file
  except FileNotFoundError:
  print("Error, file not found")
  quit()
  except json.JSONDecodeError
  print("Could not decode file")
  quit()
quiz_questions = random.sample(question_bank, 10)
results = []
#**************************************************************************
#To start
for index, q in enumerate(quiz_questions,1):
print(f"question {index}: {q[question]}")
start=time.time()
if q[type] == "tf":
answer = input("Is this true or false").strip.lower
correct = (answer.startswith("t") and q[answer] is True) or (answer.startswith("f") and q["answer"] is False)
if q[type] == "mcq":
elif q["type"] == "mcq":
        for i, option in enumerate(q["options"], 1):
            print(f"{i}. {option}")
        choice = input("Enter a letter: ").strip()
        correct = choice == q["answer"]
elif q["type"] == "frq":
answer = input("Please give a short reply answering this question: ").lower
keywords = q[keywords]
def Question_type(list_questions[]):
#starts while timer when question is asked
#if multiple choice return multiple
#if true/false return q5050
#if FRQ return FRQ
def multiple_choice(multiple)
# checks what answer was selected and prints out stored selected answer
def true_false(q5050)
# checks if true or false, prints correct answer
def Free_Response(FRQ)
# checks keyword frequency, if meets requirement then says correct
# if not correct prints out expained answer
#**************************************************************************
print("-----------------Hello, welcome to our EECE question review game!-----------------")
print("We will ask you 10 questions then record your answers and the time it took")
